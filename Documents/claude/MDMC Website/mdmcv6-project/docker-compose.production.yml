# ðŸš€ Docker Compose Configuration Production
# Configuration pour dÃ©ploiement en production avec tous les services

version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: mdmc-backend-prod
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
    env_file:
      - ./backend/.env.production
    volumes:
      - backend_logs:/app/logs
    networks:
      - mdmc-network
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: mdmc-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:80"
    env_file:
      - ./frontend/.env.production
    networks:
      - mdmc-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de donnÃ©es MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mdmc-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secure-mongo-password
      MONGO_INITDB_DATABASE: mdmc_production
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mdmc-network
    command: mongod --auth

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    container_name: mdmc-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mdmc-network
    command: redis-server --requirepass secure-redis-password

  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: mdmc-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mdmc-network
    depends_on:
      - frontend
      - backend

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mdmc-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mdmc-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Dashboard Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mdmc-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secure-grafana-password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mdmc-network
    depends_on:
      - prometheus

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mdmc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16